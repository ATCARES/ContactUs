<?php
/** ContactUs class
* This is what is executed when a user accesses Special:ContactUs
*/
if (!defined('MEDIAWIKI'))
    die("Not a valid entry point.");

class SpecialContactUs extends FormSpecialPage {
    /**
     * @var \User A user object to work with.
     */
    protected $user;
    /**
     * @var array People who will receive emails
     */
    private $recipients;
    /**
     * @var array Recipient groups
     */
    private $groups;
    /**
     * @var string permission string
     */
    private $perm;
    /**
     * Constructor. Sets up the User object, then
     * calls the parent's constructor.
      */

    function __construct(){
        // Make $this->user into a user object
        $this->user = $this->getUser();
        // Set permission to view settings information
        $this->perm = 'contactus-admin';
        // And get the result of the parent constructor.
		parent::__construct( 'ContactUs' );
    }

    /**
     * Gathers settings from MediaWiki pages
     * @param string $setting
     * @return Content|null|string
     * @todo Might be able to trim this down into a specific function
     */
    private function load_user_settings($setting){
        // We can't do anything if that parameter is null.
        if ($setting == '')
            return '';
        $page = Title::newFromText($setting, NS_MEDIAWIKI);
        if (!$page->exists())
            return '';
        else {
            $page = wikiPage::factory($page);
            $cont = $page->getContent();
            $cont = $cont->mText;
        }
        return $cont;
    }

    /**
     * Gathers all settings information from the mediawiki pages
     * @return array $settings
     * @throws mwException
     *
     */
    private function load_all_settings(){
        global $wgContactUs_Recipients, $wgContactUs_Groups, $wgContactUs_DisableGroups;
        if ($wgContactUs_DisableGroups === true)
            $this->groups = false;
        $return = array();
        if (!is_array($wgContactUs_Recipients)){
          if  (in_array('sysop',$this->user->getAllGroups()))
                $msg = 'contactus-settings-error-sysop';
          else
                $msg = 'contactus-settings-error-public';
            throw new ErrorPageError('contactus-bad-settings', $msg);
        }
        $this->recipients = $wgContactUs_Recipients;

        if (!is_array($wgContactUs_Groups && $this->groups !== false)){
            if  (in_array('sysop',$this->user->getAllGroups()))
                $msg = 'contactus-settings-error-sysop';
            else
                $msg = 'contactus-settings-error-public';
            throw new ErrorPageError('contactus-bad-settings', $msg);
        }
        $this->groups = $wgContactUs_Groups;

        $custom = $this->load_user_settings('Contactus-custom-message');
        if ($custom != ''){
            $this->custom_message = $custom;
            $return['custom_message'] = $custom;
        }
        return $return;

    }
    /**
     * This checks permissions and throws a mwException if they are insufficient
     * @throws mwException
     */
    public function checkPermissions($perm){
        if (!$this->user->isAllowed($perm))
            $this->displayRestrictionError();
    }
    /**
     * This function handles the extension's output
     * @param string $type Type of form to build
     */
    private function build_form($type){
        $output = $this->getOutput();
        $settings = $this->load_all_settings();
        if ($type == 'email'){



             Xml::openElement('p', array('id' => 'contactus-msg'));
             ($settings['custom_message'] && $settings['custom_message'] != '')?
                $output->addWikiText($settings['custom_message']):
                $output->addWikiMsg('contactus-page-desc');
            Xml::closeElement("p");
            Xml::openElement("div", array('id' => 'contactus_form_wrapper', 'style' => 'margin:0 auto'));
            $stuff = $this->getFormFields();

            $this->getForm($stuff)->prepareForm()->displayForm($res = null);
            Xml::closeElement('div');
        }
        elseif ($type == 'settings'){
            $text = $this->make_settings_form($settings);
            Xml::openElement('p', array('id' => 'contactus-settings-msg'));
            $output->addWikiMsg('contactus-settings-msg');
            Xml::closeElement('p');
            $output->addWikiText($text);
        }
        elseif ($type == 'success'){
            $output->addWikiMsg('contactus-email-sent');
        }
    }

    /**
     * Template for the settings table
     * @param array $settings array of values generated by $this->load_all_settings()
     * @return string $wikitext output in wikitext format
     */
    private function make_settings_form($settings){

        /*
        $wikitext = '===Users ($wgContactUs_Recipients)===';
        $wikitext .= "\n{".'|class="wikitable" id="contactus-users-table"
        | '.wfMessage('contactus-table-users')->text().'
        |'.wfMessage('contactus-table-groups')->text() . '
        |-' . "\n";
        foreach ($this->recipients as $key => $val){
            $wikitext .= "| [[User:$key|$key]]
            | ";
            foreach($val as $group){
                $wikitext .= "$group, ";
            }
            $wikitext .= "\n|-\n";
        }
        $wikitext .= "|}\n\n" . '
                 {| class="wikitable" id="contactus-groups-table"
                 | '.wfMessage('contactus-table-groups')->text() . '
                 | '.$this->groups.'
                 |}';
        */
        return $wikitext;
    }
    /**
     * Gathers recipients' emails
     * @return array $email
     */
    private function get_to_address(){
        $email = array();
        foreach ($this->recipients as $name => $group){
            $user = User::newFromName($name);
            $email[] = $user->getEmail();
        }
        return $email;

    }
    /**
     * This function actually sends the email.
     */
    private function send_mail(){
        $request = $this->getRequest();
        $sender = $request->getText('');
        $to = $this->get_to_address();
        if (empty($recipients))
            throw new MWException(wfMessage('contactus-no-recipients'));
        preg_match('/^.*\@.*\..*$/', $sender, $matches);
        if ($sender == '')
            throw new ErrorPageError('contactus-bad-settings','contactus-no-email');
        if (empty($matches))
            throw new MWException(wfMessage('contactus-bad-email'));
        // Truly and finally send the emails
        $status = userMailer::send($recipients, $sender, $subject, $body);
    }

    /**
     * Create the template to pass to $this->getForm()
     * @return Array
     */
    protected function getFormFields(){
        $formDescriptor = array(
            'user-email' => array(
                'label-message' => 'contactus-your-email',
                'type' => 'text'
            ),
            'username' => array(
                'label-message' => 'contactus-your-username',
                'class' => 'HTMLTextField', // same as type 'text'
            ));
            if ($this->groups !== false){
                $formDescriptor['problem-or-question'] = array(
                    'type' => 'select',
                    'label-message' => 'contactus-problem-question',
                );
                foreach ($this->groups as $key => $val){
                    $formDescriptor['problem-or-question']['options'][$val] = $key;
                }
            }

        $formDescriptor['subject'] = array(
                'class' => 'HTMLTextField',
                'label-message' => 'contactus-subject',
            );
        $formDescriptor['body'] = array(
                'class' => 'HTMLTextField',
                'label-message' => 'contactus-message',
            );
        return $formDescriptor;
    }
    function onSubmit(array $data){

        $this->send_mail();
        throw new mwException();


    }
    function onSuccess(){
        $op = $this->getOutput();
        $op->addElement('h2', array('id' => 'shit'), "Worked, yo.");
    }
    /**
    * Page execution.
    * @param null|string $par
    * @return void
    * @throws userBlockedError
    */
    function execute( $par ) {
        // execute must call this
        $this->setHeaders();
        $context = strtolower($par) == 'settings' ? 'settings' : 'email';
        if($context == 'email'){
            if ($this->user->isBlocked())
                throw new userBlockedError($this->user->getBlock());
            $this->build_form('email') ;
        }
        elseif ($context == 'settings'){
            $this->checkPermissions($this->perm);
            $this->build_form('settings');

        }
    }
}

